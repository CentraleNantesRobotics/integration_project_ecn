<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  
  <!-- This argument is use to choose how to control the robot, choose a value between "position" and "effort" -->
  <arg name="control" default="effort"/>
  
  <!-- These argument are used to choose a target (either 'box' or 'sphere') and a target trajectory (either 'circle', 'square' or 'custom_trajectory')-->
  <arg name="target" default="sphere"/>
  <arg name="trajectory" default="circle"/>
  
  <!-- We declare here every argument we use in the robot model -->
  <arg name="mass_1" default="1."/>
  <arg name="mass_2" default="0.5"/>
  <arg name="length_1" default="0.8"/>
  <arg name="length_2" default="0.6"/>
  <!-- The default value -1. is use to verify wether we use the default value or not --> 
  <arg name="ixx_1" default="-1."/>
  <arg name="iyy_1" default="1."/>
  <arg name="izz_1" default="1."/> 
  <arg name="ixx_2" default="-1."/>
  <arg name="iyy_2" default="1."/>  
  <arg name="izz_2" default="1."/>
  <arg name="com_1" default="-1."/> 
  <arg name="com_2" default="-1."/>
  <arg name="ixy_1" default="0."/>
  <arg name="iyz_1" default="0."/>
  <arg name="ixz_1" default="0."/>
  <arg name="ixy_2" default="0."/>
  <arg name="iyz_2" default="0."/>
  <arg name="ixz_2" default="0."/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find integ_gazebo)/worlds/integ.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
     <param name="robot_description"
    command="$(find xacro)/xacro --inorder '$(find integ_description)/urdf/arm.urdf.xacro' mass_1:=$(arg mass_1) mass_2:=$(arg mass_2) length_1:=$(arg length_1) length_2:=$(arg length_2) ixx_1:=$(arg ixx_1) iyy_1:=$(arg iyy_1) izz_1:=$(arg izz_1) ixx_2:=$(arg ixx_2) iyy_2:=$(arg iyy_2) izz_2:=$(arg izz_2) com_1:=$(arg com_1) com_2:=$(arg com_2) ixz_1:=$(arg ixz_1) iyz_1:=$(arg iyz_1) ixy_1:=$(arg ixy_1) ixz_2:=$(arg ixz_2) iyz=2:=$(arg iyz_2) ixy_2:=$(arg ixy_2)" />
     
  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model integ -param robot_description"/>

      <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF target = box if the arg is box-->
  <node name="target_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -z 1 -x 1 -y 1 -model target -file $(find integ_description)/urdf/target_models/box.urdf"
    if="$(eval arg('target') == 'box')"/>


   <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF target  = sphere if the arg is sphere or none is given -->
    <node name="target_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -z 1 -x 1 -y 1 -model target -file $(find integ_description)/urdf/target_models/sphere.urdf"
    if="$(eval arg('target') == 'sphere')"/>

   <!-- Run a cpp script to launch target's trajectory control = a square if the arg square is given-->
  <node name="square" pkg="target_trajectories" type="square"
  if="$(eval arg('trajectory') == 'square')"/>

  
     <!-- Run a cpp script to launch target's trajectory control = a circle if the arg circle is given -->
  <node name="circle" pkg="target_trajectories" type="circle"
  if="$(eval arg('trajectory') == 'circle')"/>
  
     <!-- Run a cpp script to launch target's trajectory control = a custom trajectory if the arg custom_trajectory is given -->
  <node name="custom_trajectory" pkg="target_trajectories" type="custom_trajectory"
  if="$(eval arg('trajectory') == 'custom_trajectory')"/>
    
    <!-- Run controllers (http://gazebosim.org/tutorials/?tut=ros_control) -->
  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find integ_gazebo)/params/arm_control.yaml" command="load"/>

  <!-- load the controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" args="joint1_$(arg control)_controller joint2_$(arg control)_controller joint_state_controller"/>
  
<!-- Also robot_state_publisher -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

  
    
</launch>
